// Ativar QRCODE node chatbot.js
const { Cliente, Pedido } = require('./models');
const qrcode = require('qrcode-terminal');
const { Client, MessageMedia } = require('whatsapp-web.js');
const client = new Client();

// Objeto para armazenar pedidos tempor√°rios
const pedidosPendentes = {};

// servi√ßo de leitura do qr code
client.on('qr', qr => {
    qrcode.generate(qr, { small: true });
});

client.on('ready', () => {
    console.log('Tudo certo! WhatsApp conectado.');
});

client.initialize();

const delay = ms => new Promise(res => setTimeout(res, ms));

// Fun√ß√µes auxiliares
function extrairNomeBolo(texto) {
    const match = texto.match(/quero (.+?) (para|pras|pro|na|dia|hoje)/i);
    return match ? match[1] : null;
}

function extrairData(texto) {
    const match = texto.match(/(para|pras|pro|na|dia|hoje) (.+)/i);
    return match ? match[2] : 'hoje √†s 18h';
}

// Funil de mensagens
client.on('message', async msg => {
    try {
        // Menu principal
        if (msg.body.match(/(menu|Menu|BOM DIA|BOA TARDE|BOA NOITE|dia|Bom Dia|bom dia|Boa Tarde|boa tarde|tarde|Boa Noite|boa noite|noite|oi|Oi|Ol√°|ol√°|ola|Ola)/i) && msg.from.endsWith('@c.us')) {
            const chat = await msg.getChat();
            const contact = await msg.getContact();
            const name = contact.pushname;

            await delay(1000);
            await chat.sendStateTyping();

            await client.sendMessage(msg.from, 
                `Ol√° ${name.split(" ")[0]}! üç∞ Eu sou o *Jarvis*, assistente da *Bolos do Jos√©*!\n\n` +
                '*Como posso ajudar? Digite o n√∫mero da op√ß√£o desejada:*\n\n' +
                '1Ô∏è‚É£ üç∞ Card√°pio Completo\n' +
                '2Ô∏è‚É£ ‚≠ê Mais Vendidos\n' +
                '3Ô∏è‚É£ üéÅ Promo√ß√µes\n' +
                '4Ô∏è‚É£ ‚è∞ Hor√°rio de Funcionamento\n' +
                '5Ô∏è‚É£ üìù Fazer Pedido\n' +
                '6Ô∏è‚É£ üìû Falar com Jos√©'
            );
        }

        // Op√ß√£o 1 - Card√°pio Completo
        if (msg.body === '1' && msg.from.endsWith('@c.us')) {
            const chat = await msg.getChat();
            
            await delay(1000);
            await chat.sendStateTyping();
            
            await client.sendMessage(msg.from, 
                '*üç∞ CARD√ÅPIO COMPLETO üç∞*\n\n' +
                '1. Bolo de Chocolate c/ Doce de Leite - R$ 45,00\n' +
                '2. Bolo de Chocolate Caramelizado - R$ 48,00\n' +
                '3. Bolo Trufado - R$ 55,00\n' +
                '4. Bolo de Morango - R$ 50,00\n' +
                '5. Bolo de Prest√≠gio - R$ 52,00\n' +
                '6. Bolo de Leite Ninho - R$ 58,00\n\n' +
                'Para pedir, digite:\n' +
                '"Quero [nome do bolo] para [data/hor√°rio]"\n' +
                'Exemplo: _Quero Bolo de Morango para amanh√£ √†s 15h_'
            );
        }

        // Op√ß√£o 2 - Mais Vendidos
        if (msg.body === '2' && msg.from.endsWith('@c.us')) {
            const chat = await msg.getChat();

            await delay(1000);
            await chat.sendStateTyping();

            await client.sendMessage(msg.from, 
                '*‚≠ê BOLOS MAIS VENDIDOS ‚≠ê*\n\n' +
                '1. Bolo de Morango - R$ 50,00\n' +
                '2. Bolo de Prest√≠gio - R$ 52,00\n' +
                '3. Bolo de Leite Ninho - R$ 58,00\n\n' +
                'Para pedir, digite:\n' +
                '"Quero [nome do bolo] para [data/hor√°rio]"\n' +
                'Exemplo: _Quero Bolo de Morango para hoje √†s 17h_'
            );
        }

        // Op√ß√£o 4 - Hor√°rio de Funcionamento
        if (msg.body === '4' && msg.from.endsWith('@c.us')) {
            await client.sendMessage(msg.from,
                '‚è∞*HOR√ÅRIO DE FUNCIONAMENTO*‚è∞\n\n' +
                'Segunda a Sexta: 8h √†s 19h\n' +
                'S√°bados: 8h √†s 15h\n' +
                'Domingos: Fechado\n\n' +
                'Entregas at√© 1h antes do fechamento!'
            );
        }

        // Op√ß√£o 5 - Fazer Pedido
        if (msg.body === '5' && msg.from.endsWith('@c.us')) {
            await client.sendMessage(msg.from,
                'üìù*FAZER PEDIDO*üìù\n\n' +
                'Digite no formato:\n' +
                '"Quero [nome do bolo] para [data/hor√°rio]"\n\n' +
                'Exemplos:\n' +
                '_Quero Bolo de Morango para amanh√£ √†s 15h_\n' +
                '_Quero Bolo Trufado para sexta √†s 18h_'
            );
        }

        // Op√ß√£o 6 - Falar com Jos√©
        if (msg.body === '6' && msg.from.endsWith('@c.us')) {
            await client.sendMessage(msg.from,
                'üìû*FALAR COM JOS√â*üìû\n\n' +
                'Voc√™ ser√° direcionado para falar diretamente com nosso confeiteiro!\n' +
                'Envie sua mensagem que Jos√© responder√° em breve.\n\n' +
                'Obrigado por escolher os *Bolos do Jos√©*! üç∞'
            );
        }

        // Processamento de pedidos (para qualquer mensagem com "quero")
        if (msg.body.toLowerCase().includes('quero') && msg.from.endsWith('@c.us')) {
            const chat = await msg.getChat();
            const bolo = extrairNomeBolo(msg.body);
            const data = extrairData(msg.body);

            if (!bolo) {
                await client.sendMessage(msg.from,
                    'N√£o entendi qual bolo voc√™ quer. Por favor, digite:\n' +
                    '"Quero [nome do bolo] para [data/hor√°rio]"\n' +
                    'Exemplo: _Quero Bolo de Morango para amanh√£ √†s 15h_'
                );
                return;
            }

            pedidosPendentes[msg.from] = { bolo, data, status: 'pendente' };

            await client.sendMessage(msg.from, 
                'üîπ*CONFIRMAR PEDIDO*üîπ\n\n' +
                `üç∞ Bolo: ${bolo}\n` +
                `‚è∞ Quando: ${data}\n\n` +
                'Digite *CONFIRMAR* para finalizar ou *CANCELAR* para alterar'
            );
        }

        // Confirma√ß√£o de pedido
        if (msg.body === 'CONFIRMAR|Confirmar|Confirma|SIM|sim|Sim' && pedidosPendentes[msg.from]) {
            const pedido = pedidosPendentes[msg.from];
            const chat = await msg.getChat();

            await delay(1000);
            await chat.sendStateTyping();

            await client.sendMessage(msg.from,
                '‚úÖ*PEDIDO CONFIRMADO!*‚úÖ\n\n' +
                `üç∞ Bolo: ${pedido.bolo}\n` +
                `‚è∞ Retirada: ${pedido.data}\n\n` +
                'Agora vamos preparar seu pedido com carinho!\n' +
                'Jos√© entrar√° em contato para confirmar detalhes.\n\n' +
                'Obrigado por escolher os *Bolos do Jos√©*! üç∞üíñ'
            );

            delete pedidosPendentes[msg.from];
        }

        // Cancelamento de pedido
        if (msg.body === 'CANCELAR|Cancelar|Cancela|N√£o|N√ÉO' && pedidosPendentes[msg.from]) {
            delete pedidosPendentes[msg.from];
            await client.sendMessage(msg.from, 
                '‚ùå*PEDIDO CANCELADO*‚ùå\n\n' +
                'Se quiser fazer um novo pedido, digite *MENU* para ver as op√ß√µes.'
            );
        }

    } catch (error) {
        console.error('Erro ao processar mensagem:', error);
        await client.sendMessage(msg.from, 
            'Ops! Ocorreu um erro. Por favor, tente novamente ou fale diretamente com Jos√©.'
        );
    }
});